GIT-PUSH(1)                       Git Manual                       GIT-PUSH(1)



NNAAMMEE
       git-push - Update remote refs along with associated objects

SSYYNNOOPPSSIISS
           _g_i_t _p_u_s_h [--all | --mirror | --tags] [--dry-run] [--receive-pack=<git-receive-pack>]
                      [--repo=<repository>] [-f | --force] [-v | --verbose]
                      [<repository> <refspec>...]

DDEESSCCRRIIPPTTIIOONN
       Updates remote refs using local refs, while sending objects necessary
       to complete the given refs.

       You can make interesting things happen to a repository every time you
       push into it, by setting up _h_o_o_k_s there. See documentation for ggiitt--
       rreecceeiivvee--ppaacckk(1).


OOPPTTIIOONNSS
       <repository>
           The "remote" repository that is destination of a push operation.
           This parameter can be either a URL (see the section GIT URLS below)
           or the name of a remote (see the section REMOTES below).

       <refspec>...
           The format of a <refspec> parameter is an optional plus +, followed
           by the source ref <src>, followed by a colon :, followed by the
           destination ref <dst>. It is used to specify with what <src> object
           the <dst> ref in the remote repository is to be updated.

           The <src> is often the name of the branch you would want to push,
           but it can be any arbitrary "SHA-1 expression", such as master~4 or
           HEAD (see ggiitt--rreevv--ppaarrssee(1)).

           The <dst> tells which ref on the remote side is updated with this
           push. Arbitrary expressions cannot be used here, an actual ref must
           be named. If :<dst> is omitted, the same ref as <src> will be
           updated.

           The object referenced by <src> is used to update the <dst>
           reference on the remote side, but by default this is only allowed
           if the update can fast forward <dst>. By having the optional
           leading +, you can tell git to update the <dst> ref even when the
           update is not a fast forward. This does nnoott attempt to merge <src>
           into <dst>. See EXAMPLES below for details.

           tag <tag> means the same as refs/tags/<tag>:refs/tags/<tag>.

           Pushing an empty <src> allows you to delete the <dst> ref from the
           remote repository.

           The special refspec : (or +: to allow non-fast forward updates)
           directs git to push "matching" branches: for every branch that
           exists on the local side, the remote side is updated if a branch of
           the same name already exists on the remote side. This is the
           default operation mode if no explicit refspec is found (that is
           neither on the command line nor in any Push line of the
           corresponding remotes file---see below).

       --all
           Instead of naming each ref to push, specifies that all refs under
           $GIT_DIR/refs/heads/ be pushed.

       --mirror
           Instead of naming each ref to push, specifies that all refs under
           $GIT_DIR/refs/ (which includes but is not limited to refs/heads/,
           refs/remotes/, and refs/tags/) be mirrored to the remote
           repository. Newly created local refs will be pushed to the remote
           end, locally updated refs will be force updated on the remote end,
           and deleted refs will be removed from the remote end. This is the
           default if the configuration option remote.<remote>.mirror is set.

       --dry-run
           Do everything except actually send the updates.

       --porcelain
           Produce machine-readable output. The output status line for each
           ref will be tab-separated and sent to stdout instead of stderr. The
           full symbolic names of the refs will be given.

       --tags
           All refs under $GIT_DIR/refs/tags are pushed, in addition to
           refspecs explicitly listed on the command line.

       --receive-pack=<git-receive-pack>, --exec=<git-receive-pack>
           Path to the _g_i_t_-_r_e_c_e_i_v_e_-_p_a_c_k program on the remote end. Sometimes
           useful when pushing to a remote repository over ssh, and you do not
           have the program in a directory on the default $PATH.

       -f, --force
           Usually, the command refuses to update a remote ref that is not an
           ancestor of the local ref used to overwrite it. This flag disables
           the check. This can cause the remote repository to lose commits;
           use it with care.

       --repo=<repository>
           This option is only relevant if no <repository> argument is passed
           in the invocation. In this case, _g_i_t_-_p_u_s_h derives the remote name
           from the current branch: If it tracks a remote branch, then that
           remote repository is pushed to. Otherwise, the name "origin" is
           used. For this latter case, this option can be used to override the
           name "origin". In other words, the difference between these two
           commands


               git push public         #1
               git push --repo=public  #2

           is that #1 always pushes to "public" whereas #2 pushes to "public"
           only if the current branch does not track a remote branch. This is
           useful if you write an alias or script around _g_i_t_-_p_u_s_h.

       --thin, --no-thin
           These options are passed to _g_i_t_-_s_e_n_d_-_p_a_c_k. Thin transfer spends
           extra cycles to minimize the number of objects to be sent and meant
           to be used on slower connection.

       -v, --verbose
           Run verbosely.

GGIITT UURRLLSS
       One of the following notations can be used to name the remote
       repository:


       +o   rsync://host.xz/path/to/repo.git/

       +o   http://host.xz[:port]/path/to/repo.git/

       +o   https://host.xz[:port]/path/to/repo.git/

       +o   git://host.xz[:port]/path/to/repo.git/

       +o   git://host.xz[:port]/~user/path/to/repo.git/

       +o   ssh://[user@]host.xz[:port]/path/to/repo.git/

       +o   ssh://[user@]host.xz/path/to/repo.git/

       +o   ssh://[user@]host.xz/~user/path/to/repo.git/

       +o   ssh://[user@]host.xz/~/path/to/repo.git
       SSH is the default transport protocol over the network. You can
       optionally specify which user to log-in as, and an alternate, scp-like
       syntax is also supported. Both syntaxes support username expansion, as
       does the native git protocol, but only the former supports port
       specification. The following three are identical to the last three
       above, respectively:


       +o   [user@]host.xz:/path/to/repo.git/

       +o   [user@]host.xz:~user/path/to/repo.git/

       +o   [user@]host.xz:path/to/repo.git
       To sync with a local directory, you can use:


       +o   /path/to/repo.git/

       +o   file:///path/to/repo.git/
       They are mostly equivalent, except when cloning. See ggiitt--cclloonnee(1) for
       details.

       If there are a large number of similarly-named remote repositories and
       you want to use a different format for them (such that the URLs you use
       will be rewritten into URLs that work), you can create a configuration
       section of the form:



                   [url "<actual url base>"]
                           insteadOf = <other url base>

       For example, with this:



                   [url "git://git.host.xz/"]
                           insteadOf = host.xz:/path/to/
                           insteadOf = work:

       a URL like "work:repo.git" or like "host.xz:/path/to/repo.git" will be
       rewritten in any context that takes a URL to be
       "git://git.host.xz/repo.git".


RREEMMOOTTEESS
       The name of one of the following can be used instead of a URL as
       <repository> argument:


       +o   a remote in the git configuration file: $GIT_DIR/config,

       +o   a file in the $GIT_DIR/remotes directory, or

       +o   a file in the $GIT_DIR/branches directory.
       All of these also allow you to omit the refspec from the command line
       because they each contain a refspec which git will use by default.


   NNaammeedd rreemmoottee iinn ccoonnffiigguurraattiioonn ffiillee
       You can choose to provide the name of a remote which you had previously
       configured using ggiitt--rreemmoottee(1), ggiitt--ccoonnffiigg(1) or even by a manual edit
       to the $GIT_DIR/config file. The URL of this remote will be used to
       access the repository. The refspec of this remote will be used by
       default when you do not provide a refspec on the command line. The
       entry in the config file would appear like this:



                   [remote "<name>"]
                           url = <url>
                           pushurl = <pushurl>
                           push = <refspec>
                           fetch = <refspec>

       The <pushurl> is used for pushes only. It is optional and defaults to
       <url>.


   NNaammeedd ffiillee iinn $$GGIITT__DDIIRR//rreemmootteess
       You can choose to provide the name of a file in $GIT_DIR/remotes. The
       URL in this file will be used to access the repository. The refspec in
       this file will be used as default when you do not provide a refspec on
       the command line. This file should have the following format:



                   URL: one of the above URL format
                   Push: <refspec>
                   Pull: <refspec>


       Push: lines are used by _g_i_t_-_p_u_s_h and Pull: lines are used by _g_i_t_-_p_u_l_l
       and _g_i_t_-_f_e_t_c_h. Multiple Push: and Pull: lines may be specified for
       additional branch mappings.


   NNaammeedd ffiillee iinn $$GGIITT__DDIIRR//bbrraanncchheess
       You can choose to provide the name of a file in $GIT_DIR/branches. The
       URL in this file will be used to access the repository. This file
       should have the following format:



                   <url>#<head>

       <url> is required; #<head> is optional.

       Depending on the operation, git will use one of the following refspecs,
       if you don't provide one on the command line. <branch> is the name of
       this file in $GIT_DIR/branches and <head> defaults to master.

       git fetch uses:



                   refs/heads/<head>:refs/heads/<branch>

       git push uses:



                   HEAD:refs/heads/<head>


OOUUTTPPUUTT
       The output of "git push" depends on the transport method used; this
       section describes the output when pushing over the git protocol (either
       locally or via ssh).

       The status of the push is output in tabular form, with each line
       representing the status of a single ref. Each line is of the form:



            <flag> <summary> <from> -> <to> (<reason>)

       If --porcelain is used, then each line of the output is of the form:



            <flag> \t <from>:<to> \t <summary> (<reason>)


       flag
           A single character indicating the status of the ref. This is blank
           for a successfully pushed ref, !  for a ref that was rejected or
           failed to push, and _= for a ref that was up to date and did not
           need pushing (note that the status of up to date refs is shown only
           when git push is running verbosely).

       summary
           For a successfully pushed ref, the summary shows the old and new
           values of the ref in a form suitable for using as an argument to
           git log (this is <old>..<new> in most cases, and <old>...<new> for
           forced non-fast forward updates). For a failed update, more details
           are given for the failure. The string rejected indicates that git
           did not try to send the ref at all (typically because it is not a
           fast forward). The string remote rejected indicates that the remote
           end refused the update; this rejection is typically caused by a
           hook on the remote side. The string remote failure indicates that
           the remote end did not report the successful update of the ref
           (perhaps because of a temporary error on the remote side, a break
           in the network connection, or other transient error).

       from
           The name of the local ref being pushed, minus its refs/<type>/
           prefix. In the case of deletion, the name of the local ref is
           omitted.

       to
           The name of the remote ref being updated, minus its refs/<type>/
           prefix.

       reason
           A human-readable explanation. In the case of successfully pushed
           refs, no explanation is needed. For a failed ref, the reason for
           failure is described.

NNOOTTEE AABBOOUUTT FFAASSTT--FFOORRWWAARRDDSS
       When an update changes a branch (or more in general, a ref) that used
       to point at commit A to point at another commit B, it is called a
       fast-forward update if and only if B is a descendant of A.

       In a fast-forward update from A to B, the set of commits that the
       original commit A built on top of is a subset of the commits the new
       commit B builds on top of. Hence, it does not lose any history.

       In contrast, a non-fast-forward update will lose history. For example,
       suppose you and somebody else started at the same commit X, and you
       built a history leading to commit B while the other person built a
       history leading to commit A. The history looks like this:




                 B
                /
            ---X---A


       Further suppose that the other person already pushed changes leading to
       A back to the original repository you two obtained the original commit
       X.

       The push done by the other person updated the branch that used to point
       at commit X to point at commit A. It is a fast-forward.

       But if you try to push, you will attempt to update the branch (that now
       points at A) with commit B. This does _n_o_t fast-forward. If you did so,
       the changes introduced by commit A will be lost, because everybody will
       now start building on top of B.

       The command by default does not allow an update that is not a
       fast-forward to prevent such loss of history.

       If you do not want to lose your work (history from X to B) nor the work
       by the other person (history from X to A), you would need to first
       fetch the history from the repository, create a history that contains
       changes done by both parties, and push the result back.

       You can perform "git pull", resolve potential conflicts, and "git push"
       the result. A "git pull" will create a merge commit C between commits A
       and B.




                 B---C
                /   /
            ---X---A


       Updating A with the resulting merge commit will fast-forward and your
       push will be accepted.

       Alternatively, you can rebase your change between X and B on top of A,
       with "git pull --rebase", and push the result back. The rebase will
       create a new commit D that builds the change between X and B on top of
       A.




                 B   D
                /   /
            ---X---A


       Again, updating A with this commit will fast-forward and your push will
       be accepted.

       There is another common situation where you may encounter
       non-fast-forward rejection when you try to push, and it is possible
       even when you are pushing into a repository nobody else pushes into.
       After you push commit A yourself (in the first picture in this
       section), replace it with "git commit --amend" to produce commit B, and
       you try to push it out, because forgot that you have pushed A out
       already. In such a case, and only if you are certain that nobody in the
       meantime fetched your earlier commit A (and started building on top of
       it), you can run "git push --force" to overwrite it. In other words,
       "git push --force" is a method reserved for a case where you do mean to
       lose history.


EEXXAAMMPPLLEESS
       git push
           Works like git push <remote>, where <remote> is the current
           branch's remote (or origin, if no remote is configured for the
           current branch).

       git push origin
           Without additional configuration, works like git push origin :.

           The default behavior of this command when no <refspec> is given can
           be configured by setting the push option of the remote.

           For example, to default to pushing only the current branch to
           origin use git config remote.origin.push HEAD. Any valid <refspec>
           (like the ones in the examples below) can be configured as the
           default for git push origin.

       git push origin :
           Push "matching" branches to origin. See <refspec> in the OPTIONS
           section above for a description of "matching" branches.

       git push origin master
           Find a ref that matches master in the source repository (most
           likely, it would find refs/heads/master), and update the same ref
           (e.g.  refs/heads/master) in origin repository with it. If master
           did not exist remotely, it would be created.

       git push origin HEAD
           A handy way to push the current branch to the same name on the
           remote.

       git push origin master:satellite/master dev:satellite/dev
           Use the source ref that matches master (e.g.  refs/heads/master) to
           update the ref that matches satellite/master (most probably
           refs/remotes/satellite/master) in the origin repository, then do
           the same for dev and satellite/dev.

       git push origin HEAD:master
           Push the current branch to the remote ref matching master in the
           origin repository. This form is convenient to push the current
           branch without thinking about its local name.

       git push origin master:refs/heads/experimental
           Create the branch experimental in the origin repository by copying
           the current master branch. This form is only needed to create a new
           branch or tag in the remote repository when the local name and the
           remote name are different; otherwise, the ref name on its own will
           work.

       git push origin :experimental
           Find a ref that matches experimental in the origin repository (e.g.
           refs/heads/experimental), and delete it.

       git push origin +dev:master
           Update the origin repository's master branch with the dev branch,
           allowing non-fast forward updates.  TThhiiss ccaann lleeaavvee uunnrreeffeerreenncceedd
           ccoommmmiittss ddaanngglliinngg iinn tthhee oorriiggiinn rreeppoossiittoorryy..  Consider the following
           situation, where a fast forward is not possible:


                           o---o---o---A---B  origin/master
                                    \
                                     X---Y---Z  dev

           The above command would change the origin repository to


                                     A---B  (unnamed branch)
                                    /
                           o---o---o---X---Y---Z  master

           Commits A and B would no longer belong to a branch with a symbolic
           name, and so would be unreachable. As such, these commits would be
           removed by a git gc command on the origin repository.

AAUUTTHHOORR
       Written by Junio C Hamano <gitster@pobox.com>, later rewritten in C by
       Linus Torvalds <torvalds@osdl.org>


DDOOCCUUMMEENNTTAATTIIOONN
       Documentation by Junio C Hamano and the git-list <git@vger.kernel.org>.


GGIITT
       Part of the ggiitt(1) suite




Git 1.6.4.2                       08/29/2009                       GIT-PUSH(1)
